/*
 * Disease Prevalence API
 *
 * The purpose is to provide a population prevalence for a given disease and country.  Using the country population and a disease prevalence factor, a potential patient population for the disease can be returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A prevalence object
    /// </summary>
    [DataContract]
    public partial class Prevalence : IEquatable<Prevalence>
    { 
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid prevalanceId { get; set; }
        
        /// <summary>
        /// Gets or Sets DiseaseName
        /// </summary>
        [Required]
        [DataMember(Name="diseaseName")]
        public string DiseaseName { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name="countryName")]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name="population")]
        public int? Population { get; set; }

        /// <summary>
        /// Gets or Sets PrevalanceFactor
        /// </summary>
        [DataMember(Name="prevalanceFactor")]
        public int? PrevalanceFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Prevalence {\n");
            sb.Append("  DiseaseName: ").Append(DiseaseName).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("  PrevalanceFactor: ").Append(PrevalanceFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Prevalence)obj);
        }

        /// <summary>
        /// Returns true if Prevalence instances are equal
        /// </summary>
        /// <param name="other">Instance of Prevalence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Prevalence other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DiseaseName == other.DiseaseName ||
                    DiseaseName != null &&
                    DiseaseName.Equals(other.DiseaseName)
                ) && 
                (
                    CountryName == other.CountryName ||
                    CountryName != null &&
                    CountryName.Equals(other.CountryName)
                ) && 
                (
                    Population == other.Population ||
                    Population != null &&
                    Population.Equals(other.Population)
                ) && 
                (
                    PrevalanceFactor == other.PrevalanceFactor ||
                    PrevalanceFactor != null &&
                    PrevalanceFactor.Equals(other.PrevalanceFactor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DiseaseName != null)
                    hashCode = hashCode * 59 + DiseaseName.GetHashCode();
                    if (CountryName != null)
                    hashCode = hashCode * 59 + CountryName.GetHashCode();
                    if (Population != null)
                    hashCode = hashCode * 59 + Population.GetHashCode();
                    if (PrevalanceFactor != null)
                    hashCode = hashCode * 59 + PrevalanceFactor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Prevalence left, Prevalence right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Prevalence left, Prevalence right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
