/*
 * Disease Prevalence API
 *
 * The purpose is to provide a population prevalence for a given disease and country.  Using the country population and a disease prevalence factor, a potential patient population for the disease can be returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class PrevalencesApiController : Controller
    { 
        private readonly PrevalenceContext _context;

        public PrevalencesApiController(PrevalenceContext context)
        {
            _context = context;
        }


        /// <summary>
        /// Gets all availalbe prevalence
        /// </summary>
        /// <remarks>Returns a list containing all country names, population, and prevalence factors. The list supports paging.</remarks>
        /// <param name="pageSize">Number of persons returned</param>
        /// <param name="pageNumber">Page number</param>
        /// <response code="200">A list of Prevalence</response>
        /// <response code="500">An unexpected error occured.</response>
        [HttpGet]
        [Route("/ctos-design/IndicationPrevalenceAPI/0.1/prevalence")]
        [ValidateModelState]
        [SwaggerOperation("SearchPrevalence")]
        [SwaggerResponse(statusCode: 200, type: typeof(Prevalences), description: "A list of Prevalence")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "An unexpected error occured.")]
        public virtual IActionResult SearchPrevalence([FromQuery][Range(0, 100)]int? pageSize, [FromQuery]int? pageNumber)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Prevalences));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            var prevs = _context.Prevalence.ToList();

            return new ObjectResult(prevs);
        }
    }
}
